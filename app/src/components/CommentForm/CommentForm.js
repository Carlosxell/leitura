import React, { Component } from 'react';import { connect } from 'react-redux';import { withRouter } from 'react-router';import '../../assets/css/Forms.css';import './CommentForm.css';import { handleSetComment, handleEditComment } from "../../actions";class CommentForm extends Component {  constructor(props) {    super(props);    this.state = {      author: '',      body: '',      edit: false,      parentId: this.props.idParent    };    this.clearValues = this.clearValues.bind(this);    this.checkForDisable = this.checkForDisable.bind(this);    this.handleChangeText = this.handleChangeText.bind(this);    this.handleChangeComment = this.handleChangeComment.bind(this);    this.handleSetNewComment = this.handleSetNewComment.bind(this);  }  componentWillReceiveProps(nextProps, nextContext) {    if(nextProps.dados) {      this.setState({        edit: true,        author: nextProps.dados.author,        body: nextProps.dados.body,        parentId: nextProps.dados.parentId,        id: nextProps.dados.id      })    }  }  handleChangeText(e) {    let val = e.target.value;    this.setState({ author: val })  }  clearValues() {    this.setState({ author: '', body: '' })  }  handleChangeComment(e) {    let val = e.target.value;    this.setState({ body: val })  }  async handleSetNewComment(e) {    let id = Math.random().toString(36).substr(-16);    let timestamp = (new Date()).toISOString();    e.preventDefault();    if(this.state.edit) {      const obj = { ...this.props.dados };      obj.body = this.state.body;      obj.author = this.state.author;      await this.props.editComment(obj);      this.props.history.push(`/post/${ obj.parentId }`)    }else{      await this.props.setComment({ timestamp, id, ...this.state });      return this.clearValues();    }  }  checkForDisable(text, comment) {    let textCheck = (text.length >= 2);    let commentCheck = (comment.length >= 5);    return (textCheck && commentCheck);  }  render() {    return (      <form autoComplete='off' className='commentForm' noValidate>        <div className='commentForm_grid'>          <label className='commentForm_label' htmlFor="nome">            <strong>Nome</strong>          </label>          <div className='commentForm_grid_wrap'>            <input onChange={ this.handleChangeText }                   className='commentForm_input form'                   id='nome'                   placeholder='Ex: José abrantes'                   type='text'                   value={ this.state.author } />          </div>        </div>        <textarea onChange={ this.handleChangeComment }                  className='commentForm_textArea form'                  placeholder='Digite aqui seu comentário'                  value={ this.state.body }></textarea>        <div className='commentForm_footer'>          <button onClick={ this.handleSetNewComment }                  className='commentForm_btn'                  disabled={ !this.checkForDisable(this.state.author, this.state.body) }                  type='submit'>Comment</button>        </div>      </form>    );  }}const mapStateToProps = store => ({});const mapDispatchToProps = (dispatch) => ({  setComment: (val) => dispatch(handleSetComment(val)),  editComment: (val) => dispatch(handleEditComment(val)),});export default connect(mapStateToProps, mapDispatchToProps)(withRouter(CommentForm));